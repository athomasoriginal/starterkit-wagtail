****************************************
{{cookiecutter.repo_name}} Documentation
****************************************

Welcome to **{{cookiecutter.repo_name}}** 's documentation.  This document will provide you with a high level overview of this project.

GETTING STARTED
===============

Hey there and welcome to **{{cookiecutter.repo_name}}**'s documentation.  Hopefully you will be able to find some answers here.  If you have already completed the `quickstart`_ and are still looking for more info, this is the place.  Below you will find a little more information about working with this app.

This app is strictly server side technology. The front-end portion should be added at your discretion.

directory structure
-------------------

.. code-block::

    {{cookiecutter.repo_name}}
        └── src
            └── server <- generated by gulp.  contains compiled static files.
                ├── apps              <- Django apps go here
                ├── config            <- Django settings, urls, wsgi
                ├── requirements      <- Django requirements here
                └── static            <- Project static files
                    └──javascripts    <- Javascript lives here
                        └── index.js  <- Your main js file.  webpacks entry point.
                    └── stylesheets   <- Stylus code lives here
                        ├── base      <- base css files here - e.g. normalize
                        ├── utils     <- variables and mixins can live here
                        └── main.styl <- your main styl file
                └── templates         <- project wide tools - vagrant, gulp, webpack etc.

general
-------

**App - home**

This project starts you off with a *home* page.  The app does not really do much, it's more of a placeholder.  What is nice about it is that there is a migration file that creates the page for your and initializes you site.  This is about 4-8 steps removed from the process.  This is implemented by Wagtail itself in their ``wagtail start`` project template.  Check out `Extend the HomePage model`_ in wagtails documentation to see how you can work with this.

**Favicon**

The favicon is configured to be served in two way for this project:

* ``config/urls.py``
* ``link`` tag in ``base.html``

The reason for both is browser behavior can be strange for favicons.  This is an extra measure to help make sure that the favicon is handled correctly.  For more information read `Fail Proof Favicons`_.

**error pages**

This project comes with templates for ``400``, ``404`` and ``500``.  I have provided urls in the ``config/urls.py``.  You can test the 500 page while in development, but if you want to test the ``400`` or ``404`` pages, you will need to set ``DEBUG=False``

http://localhost:8111/500

Keep in mind that when you are styling these, it is good practice to keep the styles and javascript inline just to be safe.

**Overextends**

This third party django templating helper is added by default with this project.

**Customize Wagtail Admin**

This project comes with the templates required to customize the pages for the wagtail admin site.  There are four templates:

*branding_logo : base.html*

.. code-block:: html

    {% raw %}
    {% block branding_logo %}
        <img src="{{ STATIC_URL }}images/custom-logo.svg" alt="Custom Project" width="80" />
    {% endblock %}
    {% endraw %}

*branding_favicon : admin_base.html*

.. code-block:: html

    {% raw %}
    {% block branding_favicon %}
        <link rel="shortcut icon" href="{{ STATIC_URL }}images/favicon.ico" />
    {% endblock %}
    {% endraw %}

*branding_login : login.html*

.. code-block:: html

    {% raw %}
    {% block branding_login %}Sign in to Frank's Site{% endblock %}
    {% endraw %}

*branding_welcome : home.html*

.. code-block:: html

    {% raw %}
    {% block branding_welcome %}Welcome to Frank's Site{% endblock %}
    {% endraw %}

**settings**

+---------------------------+----------------------------------------+
| Setting                   | value                                  |
+===========================+========================================+
| database name             | {{cookiecutter.db_name}}               |
+---------------------------+----------------------------------------+
| database username         | {{cookiecutter.db_user}}               |
+---------------------------+----------------------------------------+
| database password         | {{cookiecutter.db_password}}           |
+---------------------------+----------------------------------------+
| database host             | {{cookiecutter.db_host}}               |
+---------------------------+----------------------------------------+
| django superuser name     | {{cookiecutter.django_login_username}} |
+---------------------------+----------------------------------------+
| django superuser password | {{cookiecutter.django_login_password}} |
+---------------------------+----------------------------------------+

Under The Hood
==============

You are going to have to update the above url where it says ``localhost`` to your computers IP address.  To quickly get this,
run ``ipconfig getifaddr en0`` which will return something like ``192.128.3.142`` and then just replace localhost in the above DJANGO_DATABASE_URL
with the IP address returned in the above step like so:  DJANGO_DATABASE_URL="postgres://{{cookiecutter.db_user}}:{{cookiecutter.db_password}}@192.128.3.142/{{cookiecutter.db_name}}".
The reason we do this is because of the way that our process works.  We are not going to run our database in a docker container.  At the time of
writing this, database in containers is not best practice.  In the spirit of enforcing good practices, we will avoid using the database in a container process.


Deploying
=========

This section describes how to deploy this project


Contributing
============

This section outlines how you want people to contribute to your project.

Git Workflow: Forking and Branching
-----------------------------------

All contributors will Fork and Clone a copy of the official repository.  Run through the following steps:

Lead Developer:
...............

1.  Initialize a new bare repository
2.  Create a development branch
3.  Add working project to master
4.  pull working code to development branch

Contributors:
............

1.  Fork the project repo
2.  Clone a copy of the forked repo

.. code-block:: bash

    git clone https://user@github.com/user/repo.git

4.  Add remote Repositories (The location of the official repo)

.. code-block:: bash

    git remote add upstream https://github.com/maintainer/repo

5. When each contributor works on a new feature, they create a new branch based off their local main repo branch

.. code-block:: bash

    git checkout -b your-feature master

6. Contributors work in this feature branch then when they are satisfied with their code, or the main branch has moved forward, run the following command:

.. code-block:: bash

    git pull --rebase upstream development

8.  When ready to commit the branch - push to your public fork

.. code-block:: bash

    git push origin your-feature

10. Make a PR

Tests
=====

To run tests, move into the `src` dir and run `py.test`.  Unless you have started writing more tests, you should
see one test run and pass.


Deploy Checklist
================

- Setup log files

Git Workflow: Feature Branch Naming Conventions
-----------------------------------------------

Add information about your organizations workflow below


.. _quickstart: http://google.ca
.. _standalone django scripts: http://www.b-list.org/weblog/2007/sep/22/standalone-django-scripts/
.. _Extend the HomePage model: http://docs.wagtail.io/en/v1.3.1/getting_started/tutorial.html
.. _Fail Proof Favicons: http://staticfiles.productiondjango.com/blog/failproof-favicons/
